import gym
import numpy as np
env = gym.make('FrozenLake-v0')

# create and initialize with zeros the table for actions and states
Q = np.zeros([env.observation_space.n, env.action_space.n])

# Define learning parameters
lr = 0.8
y = 0.95
num_episodes = 2000

# List to contain total rewards and steps er episode
rList = []
for i in range(num_episodes):
    # reset environment
    s = env.reset()
    rAll = 0
    d = False
    j = 0
    while j < 99:
        j += 1
        # The follwoing line can be broken down as this: 1. take all the actions for the current state s from the table (Q[s,:])
        # 2. add some noise (np.random.randn(1.env.action_space.n)*(1/(i+1)))
        # 3. take the argument corresponding to the highest value which would bethe highest reward in the table
        # NOTE1: The random number is just adding noise to the selection of the action
        # NOTE2: Actions are hot-encoded
        a = np.argmax(Q[s, :] + np.random.randn(1, env.action_space.n) * (1.0 / (i + 1)))
        # Get new state and reward from the environment
        s1, r, d, _ = env.step(a)
        # Uodate Q-table
        Q[s, a] = Q[s, a] + lr * (r + y * np.max(Q[s1, :]) - Q[s, a])
        rAll += r
        s = s1
        if d == True:
            break
    rList.append(rAll)

print("Score over time: " + str(sum(rList) / num_episodes))
print("Final Q-table")
print(Q)
